/* tslint:disable */
/* eslint-disable */
/**
 * Trip Planner API
 * API for managing trips
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Destination,
  DestinationInput,
  DestinationUpdate,
  Trip,
  TripInput,
  TripUpdate,
} from '../models/index';
import {
    DestinationFromJSON,
    DestinationToJSON,
    DestinationInputFromJSON,
    DestinationInputToJSON,
    DestinationUpdateFromJSON,
    DestinationUpdateToJSON,
    TripFromJSON,
    TripToJSON,
    TripInputFromJSON,
    TripInputToJSON,
    TripUpdateFromJSON,
    TripUpdateToJSON,
} from '../models/index';

export interface CreateDestinationRequest {
    destinationInput: DestinationInput;
}

export interface CreateTripRequest {
    tripInput: TripInput;
}

export interface DeleteDestinationRequest {
    id: string;
}

export interface DeleteTripRequest {
    id: string;
}

export interface GetDestinationByIdRequest {
    id: string;
}

export interface GetDestinationByNameRequest {
    name: string;
}

export interface GetDestinationByNameContainsRequest {
    namecontains: string;
}

export interface GetDestinationByTripIdRequest {
    tripId: string;
}

export interface GetTripByDateRequest {
    date: string;
}

export interface GetTripByIdRequest {
    id: string;
}

export interface GetTripByNameRequest {
    name: string;
}

export interface UpdateDestinationRequest {
    id: string;
    destinationUpdate: DestinationUpdate;
}

export interface UpdateTripRequest {
    id: string;
    tripUpdate: TripUpdate;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a destination
     */
    async createDestinationRaw(requestParameters: CreateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters['destinationInput'] == null) {
            throw new runtime.RequiredError(
                'destinationInput',
                'Required parameter "destinationInput" was null or undefined when calling createDestination().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/destination`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationInputToJSON(requestParameters['destinationInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Create a destination
     */
    async createDestination(requestParameters: CreateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Destination> {
        const response = await this.createDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a trip
     */
    async createTripRaw(requestParameters: CreateTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters['tripInput'] == null) {
            throw new runtime.RequiredError(
                'tripInput',
                'Required parameter "tripInput" was null or undefined when calling createTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/trip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TripInputToJSON(requestParameters['tripInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     * Create a trip
     */
    async createTrip(requestParameters: CreateTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.createTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a destination
     */
    async deleteDestinationRaw(requestParameters: DeleteDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDestination().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/destination/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Delete a destination
     */
    async deleteDestination(requestParameters: DeleteDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Destination> {
        const response = await this.deleteDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a trip
     */
    async deleteTripRaw(requestParameters: DeleteTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/trip/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     * Delete a trip
     */
    async deleteTrip(requestParameters: DeleteTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.deleteTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all destinations
     */
    async getAllDestinationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Destination>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/destination`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DestinationFromJSON));
    }

    /**
     * Get all destinations
     */
    async getAllDestinations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Destination>> {
        const response = await this.getAllDestinationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all trips
     */
    async getAllTripsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Trip>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/trip`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripFromJSON));
    }

    /**
     * Get all trips
     */
    async getAllTrips(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Trip>> {
        const response = await this.getAllTripsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a destination by ID
     */
    async getDestinationByIdRaw(requestParameters: GetDestinationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDestinationById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/destination/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Get a destination by ID
     */
    async getDestinationById(requestParameters: GetDestinationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Destination> {
        const response = await this.getDestinationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find destinations by exact name
     */
    async getDestinationByNameRaw(requestParameters: GetDestinationByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Destination>>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getDestinationByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/destination/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DestinationFromJSON));
    }

    /**
     * Find destinations by exact name
     */
    async getDestinationByName(requestParameters: GetDestinationByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Destination>> {
        const response = await this.getDestinationByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find destinations containing name
     */
    async getDestinationByNameContainsRaw(requestParameters: GetDestinationByNameContainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Destination>>> {
        if (requestParameters['namecontains'] == null) {
            throw new runtime.RequiredError(
                'namecontains',
                'Required parameter "namecontains" was null or undefined when calling getDestinationByNameContains().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/destination/namecontains/{namecontains}`.replace(`{${"namecontains"}}`, encodeURIComponent(String(requestParameters['namecontains']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DestinationFromJSON));
    }

    /**
     * Find destinations containing name
     */
    async getDestinationByNameContains(requestParameters: GetDestinationByNameContainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Destination>> {
        const response = await this.getDestinationByNameContainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all destinations associated with a specific trip ID
     * Get destinations by trip ID
     */
    async getDestinationByTripIdRaw(requestParameters: GetDestinationByTripIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Destination>>> {
        if (requestParameters['tripId'] == null) {
            throw new runtime.RequiredError(
                'tripId',
                'Required parameter "tripId" was null or undefined when calling getDestinationByTripId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/destination/trip/{tripId}`.replace(`{${"tripId"}}`, encodeURIComponent(String(requestParameters['tripId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DestinationFromJSON));
    }

    /**
     * Returns all destinations associated with a specific trip ID
     * Get destinations by trip ID
     */
    async getDestinationByTripId(requestParameters: GetDestinationByTripIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Destination>> {
        const response = await this.getDestinationByTripIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns trips matching a given date
     * Find trips by date
     */
    async getTripByDateRaw(requestParameters: GetTripByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Trip>>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getTripByDate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/trip/date/{date}`.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripFromJSON));
    }

    /**
     * Returns trips matching a given date
     * Find trips by date
     */
    async getTripByDate(requestParameters: GetTripByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Trip>> {
        const response = await this.getTripByDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a trip by ID
     */
    async getTripByIdRaw(requestParameters: GetTripByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTripById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/trip/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     * Get a trip by ID
     */
    async getTripById(requestParameters: GetTripByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.getTripByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns trips with an exact name match
     * Find trips by name
     */
    async getTripByNameRaw(requestParameters: GetTripByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Trip>>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getTripByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/trip/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripFromJSON));
    }

    /**
     * Returns trips with an exact name match
     * Find trips by name
     */
    async getTripByName(requestParameters: GetTripByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Trip>> {
        const response = await this.getTripByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a destination
     */
    async updateDestinationRaw(requestParameters: UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDestination().'
            );
        }

        if (requestParameters['destinationUpdate'] == null) {
            throw new runtime.RequiredError(
                'destinationUpdate',
                'Required parameter "destinationUpdate" was null or undefined when calling updateDestination().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/destination/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationUpdateToJSON(requestParameters['destinationUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Update a destination
     */
    async updateDestination(requestParameters: UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Destination> {
        const response = await this.updateDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a trip
     */
    async updateTripRaw(requestParameters: UpdateTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTrip().'
            );
        }

        if (requestParameters['tripUpdate'] == null) {
            throw new runtime.RequiredError(
                'tripUpdate',
                'Required parameter "tripUpdate" was null or undefined when calling updateTrip().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/trip/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TripUpdateToJSON(requestParameters['tripUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     * Update a trip
     */
    async updateTrip(requestParameters: UpdateTripRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.updateTripRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
